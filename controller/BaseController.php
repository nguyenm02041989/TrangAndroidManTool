<?php

/**
 * This is the basic helper class for a controller.
 * 
 * @author trang
 *
 */
class BaseController
{	
	/**
	 * Instance of
	 *
	 * @var Object
	 */
	protected $mModel;
	
	/**
	 * This Array contains the settings for the templates
	 * @var Array
	 */
	protected $mTemplateCfg;
	
	/**
	 * This Array holds the urls
	 * @var Array
	 */
	protected $mUrls;
		
	/**
	 * Check security
	 * 
	 * @param string $redirect
	 */
	public function CheckSecurity($redirect = true) {
		
		if($_SESSION["LOGIN_STATUS"] != 1) {
			
			if($redirect) {
				BaseController::RedirectTo("/");			
			}
			else {
				
				$out = "";
				$this->GetResponseJson(RESPONSE_FAILURE, $out);
				echo $out;
				exit();
			}
		}
		
		// Load the permissions
		$acl = Acl::GetInstance();
		if( ! $acl->HasPermissions()) {
			
			$modelAcc = new AccessModel();
			$perms = $modelAcc->GetPermissions(get_class($this));
			$acl->SetPermissions($perms);
		}
	}	
	
	/**
	 * Check a form which was posted on this ID.
	 * If OK we know the form was not generated by someone else.
	 *
	 * @param int $formId
	 * @return boolean
	 */
	public function CheckSecurityFormId($formId) {
	
		if($formId == $_SESSION["SECURITY_FORM_ID"]) {
				
			$_SESSION["SECURITY_FORM_ID"] = "";
			return true;
		}
		return false;
	}
	
	/**
	 * Convert an Object to an Assoc Array
	 *
	 * @param object $object
	 * @return Array
	 */
	protected function ConvertObjectToArray($object) {
	
		if(! is_object($object)) {
			return Array();
		}
	
		$arr = Array();
		foreach($object as $prop => $value) {
				
			$arr["object_" . $prop] = $value;
		}
		return $arr;
	}
	
	/**
	 * Retrieve the index and limit
	 *
	 * @param int $index
	 * @param int $limit
	 */
	public function GetListIndexAndLimit(&$index, &$limit) {
	
		$_URLObject = FrontIndexController::GetInstance()->GetUrlObject();
		$index = $_URLObject->GetIndex();
		$limit = $_URLObject->GetLimit();
	}
	
	/**
	 * Get the ID specified in the URL
	 */
	public function GetUrlObjectId() {
	
		$_URLObject = FrontIndexController::GetInstance()->GetUrlObject();
		return $_URLObject->GetId();
	}
	
	/**
	 * This function retrieves a list with page navigation
	 *
	 * @param Pagination $objPag
	 * @return string
	 */
	public function GetListViewWithPagination(Pagination $objPag) {
	
		if(! is_a($objPag, "Pagination")) {
			return "";
		}
	
		$viewCtrl = ViewController::GetInstance();
		$index = $objPag->index;
		$limit = $objPag->limit;
	
		$searchPag = Array();
		$curPageNo = floor($index / $limit);
		$maxList = 5;
		$maxPage = $curPageNo+$maxList;
	
		$qSearch = FrontIndexController::GetRequest("q");
		$extraUrl = "";
		if(strlen($qSearch) > 0) {
			$extraUrl = "/?q=" . $qSearch;
		}
	
		$urlPage = URI::Get($this->mUrls["List"]) . "/";
	
		for($i = 0; $i < $objPag->totalPages; $i++) {
	
			$isActive = "";
			if($curPageNo == $i) {
				$isActive = "active";
			}
	
			if($objPag->totalPages > $maxList) {
	
				if($i >= $curPageNo && $i < $maxPage) {
	
					$searchPag[] = Array(
							"page_number" => $i+1,
							"url" => $urlPage . ($i * $limit) . "/" . $limit . $extraUrl,
							"active" => $isActive,
					);
				}
				else if($i == $objPag->totalPages-1) {
	
					$searchPag[] = Array(
							"page_number" => $i+1,
							"url" => $urlPage . ($i * $limit) . "/" . $limit . $extraUrl,
							"active" => $isActive,
					);
				}
				else if($i == $maxPage) {
	
					$searchPag[] = Array(
							"page_number" => "",
							"url" => "",
							"active" => "",
					);
				}
				else if($i == 0) {
	
					$searchPag[] = Array(
							"page_number" => $i+1,
							"url" => $urlPage . ($i * $limit) . "/" . $limit . $extraUrl,
							"active" => $isActive,
					);
					$searchPag[] = Array(
							"page_number" => "",
							"url" => "",
							"active" => "",
					);
				}
			}
			else {
					
				$searchPag[] = Array(
						"page_number" => $i+1,
						"url" => $urlPage . ($i * $limit) . "/" . $limit . $extraUrl,
						"active" => $isActive,
				);
			}
		}
	
		$pagNext = "";
		$pagPrev = "";
	
		if($index + 1 < $objPag->totalPages) {
			$pagNext = $urlPage . ($index + 1) * $limit . "/" . $limit . $extraUrl;
		}
	
		if($curPageNo - 1 >= 0) {
			$pagPrev = $urlPage . ($curPageNo - 1) * $limit . "/" . $limit . $extraUrl;
		}
	
		if($objPag->totalPages > 1) {
	
			$snPag = $this->GetView($viewCtrl, $objPag->templatePagination, Array(
					"pagination" => $searchPag,
					"pag_prev" => $pagPrev,
					"pag_next" => $pagNext,
					"total_records" => $objPag->totalRecords
			));
		}
		else {
				
			$snPag = $this->GetView($viewCtrl, $objPag->templatePagination, Array(
					"pagination" => NULL,
					"pag_prev" => "",
					"pag_next" => "",
					"total_records" => $objPag->totalRecords
			));
		}
	
		$snSearch = "";
	
		$snSearch = $this->GetView($viewCtrl, $this->mTemplateCfg["PathSnippets"] . $this->mTemplateCfg["Search"], Array(
				"url_search" => URI::Get($this->mUrls["Search"]),
				"q_search" => $qSearch,
		));
	
		$snippet = $this->GetView($viewCtrl, $this->mTemplateCfg["PathSnippets"] . $this->mTemplateCfg["List"], Array(
				"list_rows" => $objPag->listObjects,
				"snippet_pagination" => $snPag,
				"snippet_search" => $snSearch,
		));
		return $snippet;
	}
	
	/**
	 * Get the snippet code. Helper function to make little easy.
	 * @param string $tempName
	 * @param Array $tempValues
	 * @return string
	 */
	protected function GetSnippet($tempName, $tempValues = Array()) {
	
		$viewCtrl = ViewController::GetInstance();
	
		$snippet = $this->GetView($viewCtrl,
				$this->mTemplateCfg["PathSnippets"] . $tempName, $tempValues);
	
		return $snippet;
	}
	
	/**
	 * Get the parsed content and show in the browser.
	 *
	 * @param string $snippet
	 * @return string
	 */
	protected function GetParsedContent($snippet) {
	
		$viewCtrl = ViewController::GetInstance();
	
		return $this->GetView($viewCtrl, $this->mTemplateCfg["AdminView"], Array(
				"page_content" => $snippet,
		));
	}
		
	/**
	 * Get the response in JSON format
	 * @param string $statusCode
	 * @param string $output
	 */
	public function GetResponseJson($statusCode, &$output) {
		
		$now = date('Y-m-d H:i:s');
		$response = Array(
					'response' => array(
							'code' => $statusCode,
							'date' => $now,
					)
				);
		$output .= json_encode($response);
	}
	
	/**
	 * Get the response in JSON format
	 * 
	 * @param string $column
	 * @param string $columnType
	 * @param string $statusCode
	 * @param string $retMsg
	 * @return string
	 */
	protected function GetResponseJsonValidation($column, $columnType, $statusCode, $retMsg) {
	
		$retMsg = ViewController::GetInstance()->ParseString($retMsg);
	
		$response = Array("response" =>
				Array(	"column" => $column,
						"columntype" => $columnType,
						"status" => $statusCode,
						"message" => $retMsg,
						"date" => date("Y-m-dTH:i:s")
				),
		);
		return json_encode($response);
	}	
	
	/**
	 * Get the view to show the visitor
	 * 
	 * @param ViewController $viewCtrl
	 * @param string $template
	 * @param string $tempVars
	 * @return string
	 */
	public function GetView(ViewController $viewCtrl, $template, $tempVars = Array()) {
		
		if(is_a($viewCtrl, "ViewController") && is_object($viewCtrl)) {
			
			$arr0 = Array(
					"datetime" => date("Y-m-d H:i:s"),
					"page_content" => "",
					"name_user" => isset($_SESSION["NAME_USER"]) ? $_SESSION["NAME_USER"] : "",
			);
			
			$arr1 = array_merge($arr0, $tempVars);
			return $viewCtrl->ParseContent($template, $arr1);
		}
		return "";
	}
	
	/**
	 * Generate a security random key for a form
	 * 
	 * @return string
	 */
	public function GetSecurityFormId() {
		
		$uCode = rand() . rand() . rand();
		return $uCode;
	}
	
	/**
	 * Check if the email is unique.
	 *
	 * @param object $model
	 * @param string $column
	 * @param string $value
	 * @return boolean
	 */
	protected function IsEmailUnique($model, $column, $value) {
	
		$valEnc = Encryption::Encrypt($value);
		if(! $model->IsValueUnique($column, $valEnc)) {
			return false;
		}
		return true;
	}

	/**
	 * Just a helper function
	 * @param Object $model
	 * @param string $column
	 * @param string $value
	 * @return boolean
	 */
	protected function IsValueUnique($model, $column, $value, $recordCol = "", $recordId = "") {
	
		if(! $model->IsValueUnique($column, $value, $recordCol, $recordId)) {
			return false;
		}
		return true;
	}
		
	/**
	 * Just a simple redirect
	 * @param string $location
	 */
	public static function RedirectTo($location) {
	
		if($location == '/') {
			$loc = $location;
		}
		else {
			$loc = URI::Get($location);
		}
		header("location: " . $loc);
		exit();
	}
	

	/**
	 * Validate a field which is required
	 * 
	 * @param string $column
	 * @param string $columnType
	 * @param string $value
	 * @return string
	 */
	protected function ValidateRequiredValue($column, $columnType, $value) {
		
		$statusCode = STATUS_CODE_OK;
		$retMsg = "";
		if(strlen($value) == 0) {
			
			$statusCode = STATUS_CODE_ERROR;
			$retMsg = "{MSG_FIELD_EMPTY_REQUIRED}";
		}
		
		return $this->GetResponseJsonValidation($column, $columnType, $statusCode, $retMsg);
	}
	

	
	/**
	 * Validate a value if it's unique
	 * 
	 * @param object $model
	 * @param string $column
	 * @param string $columnType
	 * @param string $value
	 * @param string $recordCol
	 * @param string $recordId
	 * @return string
	 */
	protected function ValidateUniqueValue($model, $column, $columnType, $value, $recordCol = "", $recordId = "") {
	
		$statusCode = STATUS_CODE_OK;
		$retMsg = "";
	
		if(strlen($value) == 0) {

			$statusCode = STATUS_CODE_ERROR;
			$retMsg = "{MSG_FIELD_EMPTY_REQUIRED}";
		}
		else if(! $this->IsValueUnique($model, $column, $value, $recordCol, $recordId)) {
	
			$statusCode = STATUS_CODE_ERROR;
			$retMsg = "{MSG_FIELD_EXISTS}";
		}
		return $this->GetResponseJsonValidation($column, $columnType, $statusCode, $retMsg);
	}
	

	/**
	 * Validate an e-mail address
	 * 
	 * @param object $model
	 * @param string $column
	 * @param string $columnType
	 * @param string $value
	 * @return string
	 */
	protected function ValidateEmailValue($model, $column, $columnType, $value) {

		$statusCode = STATUS_CODE_OK;
		$retMsg = "";
		
		if(!Check::Email($value)) {
			
			$statusCode = STATUS_CODE_ERROR;
			$retMsg = "{MSG_EMAIL_INVALID}";
			return $this->GetResponseJsonValidation($column, $columnType, $statusCode, $retMsg);
		}
		
		$valEnc = Encryption::Encrypt($value);
		if(! $this->IsEmailUnique($model, $column, $valEnc)) {
		
			$statusCode = STATUS_CODE_ERROR;
			$retMsg = "{MSG_EMAIL_EXISTS}";
		}
		return $this->GetResponseJsonValidation($column, $columnType, $statusCode, $retMsg);
	}
	
	/**
	 * Write a log
	 *
	 * @param string $msg
	 * @param object $object
	 */
	public function WriteLog($msg, $object) {
	
		$message = $msg . ". " . (is_object($object) ? serialize($object) : "");
	
		$logModel = new SystemLogModel();
		$logModel->AddLog($_SESSION["USER_ID"], $_SERVER["REMOTE_ADDR"], $message);
	}
	
	
}